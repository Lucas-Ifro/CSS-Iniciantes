* {
    margin: 0;
    padding: 0;
}
/* Configurações de classe para facilitar a criação das atividades */
/* Referências:
   - https://www.youtube.com/watch?v=Nloq6uzF8RQ
   - https://www.youtube.com/watch?v=JJiyguTeBzU */

body {
    background-color: rgb(37, 37, 37);
}

h1, p, h2 {
    color: white;
    margin-left: 50px;
}

div {
    width: 100px;
    height: 100px;
    display: inline-block;
}

.titulo {
    width: 100%;
    height: 30px;
    background-color: rgb(37, 37, 37);
    border: 1px solid white;
    border-bottom: 0;
    box-sizing: border-box;
}

#content {
    display: flex;
    width: fit-content; /* Pesquisar */
}

article {
    width: 90vw;
    height: 250px;
    margin: auto;
    background-color: rgb(63, 63, 63);
    margin-top: 30px;
}

article div {
    /* Adicione propriedades se necessário */
}

.blue {
    background-color: rgb(65, 65, 249);
}

.red {
    background-color: rgb(255, 67, 67);
}

.green {
    background-color: rgb(19, 167, 19);
}

.yellow {
    background-color: rgb(230, 230, 80);
}

/* Animações */
/* Dentro do CSS, temos duas formas de adicionar animações: */
/* 1 - Através de alguma interação por parte do usuário, como um clique, hover, checkbox, focus, etc. Essa animação é chamada de transição, onde vou de um estado A para um estado B trocando os estilos e propriedades do elemento. Geralmente, essas animações são mais simples. */
/* 2 - Temos as animações automáticas, que são ativadas quando o site carrega. Essas são mais poderosas e complexas. */

/* Para criarmos uma animação, precisamos definir uma classe ou ID para o elemento. Em seguida, dentro do CSS, adicionamos uma propriedade transition:, onde podemos definir o que será mudado e quanto tempo levará. */
/* É uma boa prática colocar o tempo de duração da transição em milissegundos, pois o JavaScript trabalha dessa forma. Mas também funciona em segundos. */
/* Podemos aplicar uma transição a propriedades que têm valores numéricos, como neste exemplo, em que mudamos a cor de fundo (background). */

.transitionBackground {
    transition: background 2000ms;
}

.transitionBackground:hover {
    background-color: yellow;
    /* O hover é uma pseudo-classe ativada quando o mouse passa sobre o elemento. Neste caso, o fundo do elemento torna-se amarelo. */
}

/* Para criar um efeito, é necessário criar uma classe, adicionar um transition no CSS e, em seguida, uma forma de ativá-la, como o hover. */

.transitionSize {
    transition: transform 1000ms;
}

.transitionSize:hover {
    transform: scale(1.5);
    /* Aqui a propriedade transform está sendo usada para aumentar o elemento em 1.5x usando a função scale(). */
}

.transitionRotate {
    transition: transform 1000ms;
}

.transitionRotate:hover {
    transform: rotateZ(180deg);
}

.transitionDelay {
    transition: width 1000ms 1200ms, height 2000ms;
    /* Se adicionarmos um número após os 1000ms, ele será considerado como delay para iniciar a transição. */
    /* Também podemos apenas adicionar o transition-delay e dar um valor. */
    /* Se desejar aplicar mais de uma transição, separe por vírgula, como feito acima. */
    /* Neste caso, mudamos a altura e largura do elemento com durações diferentes, criando um efeito interessante. */
}

.transitionDelay:hover {
    width: 200px;
    height: 200px;
    /* Aqui especificamos as novas dimensões do elemento quando o hover é ativado. */
}

.transitionChecked {
    transition: transform 800ms; 
    /* Aqui criamos uma transição para o estado :checked, que gira o elemento no eixo Y. */
    /* Definimos a função transition indicando que receberá um transform e o tempo de duração. */
    height: 40px;
    width: 40px;
    /* Esses valores aumentam o tamanho do checkbox. */
}

.transitionChecked:checked {
    transform: rotateY(360deg);
    /* Aqui aplicamos a transformação com a função rotateY e damos o valor de 360 para uma rotação completa. */
}

.transitionRadio {
    width: 30px;
    height: 30px;
    transition: transform 1000ms;
    /* Aqui criamos uma transição para o estado :checked, onde o elemento aumentará de tamanho. */
}

.transitionRadio:checked {
    transform: scale(1.2);
    /* Aqui usamos a função scale para aumentar o elemento em 1.2x quando estiver marcado. */
}

/* Configurações para o texto animado */
.transitionText{
    width: 200px;
    height: 20px;
    margin-top: 30px;
    margin-left: 30px;
    text-align: center;
    
    /* Essas configurações acima são apenas para deixar o input:text mais bonito e maior */

    transition: transform 1000ms 500ms, background-color 500ms;
    /* Neste caso, faremos 2 mudanças no elemento: no tamanho e na cor. A diferença é que a transformação terá um atraso de 500ms. */
}

/* Quando o elemento estiver focado, aplicamos as seguintes configurações */
.transitionText:focus{
    transform: scale(1.05);
    background-color: rgb(143, 143, 143);
    color: white;
    
    /* Aqui passamos os valores que queremos que o elemento input receba quando estiver focado. A pseudo-classe focus é ativada quando o usuário interage com o elemento, como o clique do mouse ou do teclado. */
    /* "A pseudo-classe :focus do CSS é aplicada quando um elemento recebe foco, o que pode ocorrer quando o usuário seleciona o elemento utilizando o teclado ou ativando o mesmo com o mouse (ex: um campo de um formulário)". Referências: Developer.Mozilla.org */
}

/* ----------------------------------------------------- */
/* Animações */

/* As animações são diferentes das transições porque enquanto as transições precisam de um evento para ocorrer, as animações não precisam. Elas são ativadas quando o site carrega.
Nelas criamos uma animação dando um nome para essa animação. No exemplo abaixo, temos o Infade. Essa animação é criada usando o @keyframes, que verifica cada frame da animação, e podemos modificar o que vai acontecendo conforme o tempo da animação vai determinando. */

/* Configurações para a animação de desvanecimento */
.animationInfade{
    background-color: white;
    margin: 10px;

    animation: Infade 2000ms reverse infinite;
    /* A sintaxe é a mesma, mas os valores passados são diferentes. Primeiro vem o nome da animação, depois o tempo, o atraso, a forma com que os quadros vão se comportar e, por fim, quantas vezes a animação vai ocorrer. */
    /* O reverse é a forma com que os quadros vão se comportar. Nesse caso, ele vai de 0 ao fim e depois do fim ao 0. Temos vários valores para isso, mais para frente vou mostrar mais exemplos. */
    /* O infinite mostra quantas vezes a animação vai ocorrer; neste caso, é infinita. */
}

@keyframes Infade{
    /* Aqui temos o Keyframes. Ele vai criar a nossa animação, com ele podemos modificar o estado do elemento a cada frame do evento. Nesse caso, vamos mudar a cor de fundo, do amarelo para o vermelho até na metade da animação, e depois do vermelho para o azul até o final da animação. Como temos o reverse, ele vai voltar de trás para frente, azul, vermelho e amarelo, de forma infinita. */

    0%{ /* Aqui temos o estado inicial da animação, no frame 0 */
        background-color: rgb(255, 255, 8);
    }
    /* Podemos usar vários valores para ir modificando o elemento enquanto a animação acontece. Temos o from que seria o início e o to que seria o final; vamos usar eles mais para frente. */
    50%{
        background-color: rgb(255, 31, 31);
    }

    100%{
        background-color: rgb(81, 81, 252);
    }
    /* Essa animação Infade pode ser utilizada quantos elementos você quiser, e você pode mudar os outros valores, aumentar o tempo, por exemplo. */
}

/* Configurações para a segunda animação de desvanecimento */
.animationInfade2{
    margin: 10px;
    
    animation: Infade 4000ms linear 5; /* Recarregue a página para poder ver funcionando*/
    /* Aqui usamos a mesma animação Infade, a diferença é que agora ela não é infinita, demora mais, e os frames são lineares, passando na mesma velocidade. */
    animation-fill-mode: forwards; /* Com essa propriedade, podemos definir como o elemento vai ficar depois da animação terminar; neste caso, ele vai ficar com o estado do último frame, no caso, azul. */
}

/* Agora vamos usar a animação Rodar em dois elementos e com configurações diferentes */
/* Configurações para a animação de rotação */
.animationRotate{
    border-radius: 35%;
    /* O border-radius vai deixar o elemento com as bordas redondas */
    margin: 10px;

    animation: Rodar 2s linear infinite;
    /* Aqui vinculamos a animation com a animação Rodar. Temos que a forma com que os frames vão passar será de forma linear, ou seja, no mesmo ritmo, e isso de forma infinita. */
}

/* Configurações para a segunda animação de rotação */
.animationRotateEase{
    border-radius: 35%;
    /* O border-radius vai deixar o elemento com as bordas redondas */
    margin: 10px;

    animation: Rodar 2s infinite;
    /* Aqui temos as mesmas configurações de cima. A diferença é que vamos configurar a forma com que os frames vão correr de forma separada. */
    animation-timing-function: ease;
    /* Aqui temos a animation-timing-function, tem vários valores. O linear é um deles e já utilizamos bastante; outros valores são o ease, ease-in, ease-in-out. Mas você pode criar de uma forma customizada. Entre no inspetor do navegador, vá até o elemento animationRotateEase e clique no ícone que aparece do lado de animation-timing-function: ease; lá você vai conseguir modificar de várias formas. */
}

@keyframes Rodar {
    /* Aqui temos a animação que faz o elemento rodar no eixo Z que é o do meio. Ele sai de 0deg e vai até 360deg, voltando para a posição inicial, e depois volta a repetir a animação. */
    from{
        transform: rotateZ(0deg);
    }
    to{
        transform: rotateZ(360deg);
    }
}


.positionBox{
    position: relative;
}

/* Configurações para a animação de posição */
.animateionPosition{
    position: absolute;
    /* Com a position relative no elemento pai e a absolute no elemento filho, podemos movimentar ele como quisermos dentro do pai, utilizando o top e o left */
    margin: 10px;
    animation: Meio 2500ms linear infinite;
    /* Aqui temos uma animação Meio que vai ir adicionando novas posições para esse elemento. */
}

@keyframes Meio {
    0%{
        top: 0%;
        left: 0%;
        /* Aqui vamos ir modificando a posição do elemento dentro do pai */
    }
    50%{
        top: 50%;
        left: 50%;
        /* Aqui ele vai ir para o meio da tela e depois, por fim, voltar à posição inicial. */
    }
    100%{
        top: 0%;
        left: 0%;
    }
}

/* Quando o mouse está sobre a div, a animação é pausada */
div:hover{
    animation-play-state: paused; /* Com essa propriedade, podemos pausar uma animação. Serve também para ativar uma animação; nesse caso, ela pausa uma animação quando você coloca o mouse em cima da div. */
    /* Você pode colocar esse método no elemento como paused, e quando você passar o mouse, ele coloca a animação como ativa, running */
}

/* Esses códigos abaixo são apenas para centralizar o texto dentro da div container. */
.container{
    display: flex;
}
div.animationPromocao{
    display: flex;
    justify-content: center;
    align-items: center;
}

/* Pseudo-elemento após a animação de promoção */
.animationPromocao::after{
    /* O ::after é um pseudo-elemento, ele é utilizado muitas vezes para adicionar um texto dentro de um elemento, por exemplo, você pode adicionar uma nova palavra no final do parágrafo. */
    content: "";
    /* Para adicionar a palavra ao final do parágrafo, você utiliza o content: "Aqui vai a palavra", no caso dessa animação, vamos iniciar de forma vazia e depois adicionar as palavras dentro da animação. */
    animation: promocao 2s linear infinite;
}

/* Configurações para a animação de promoção */
@keyframes promocao {
    /* Aqui dentro da animação vamos ir dando valor para o content */
    0%{
        content: "Promoção";
    }
    50%{
        content: "";
    }
    60%{
        content: "Frete Grátis";
    }
}

/* Então, resumindo, para criar uma animação, você precisa criar uma animação e dar um nome a ela usando o Keyframes que controla todos os frames da animação, como o criado acima "promocao", com isso dentro dele você coloca o que vai ser modificado no elemento.
Após isso, dentro do elemento que vai ser animado, você coloca animation: |o nome da animação| |O tempo que vai demorar| |O delay| |A forma com que os quadros vão correr| | E por fim quantas vezes a animação vai acontecer| 
*/